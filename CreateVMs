pipeline {
    agent {
        docker { image 'ec2-by-terraform:0.1'
                    label 'master'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u root -e "TZ=Asia/Kolkata"'
					args  '--entrypoint="" -u root'	
        }
    }
   parameters {		
		string(name: 'PRODUCT', defaultValue:"sqle2eapp", description: '')				
    }

	stages
	{
		stage('GitCheckout') {
			steps{
				sh "cd /data/terraform/devops && git fetch"
				sh "cd /data/terraform/devops && git config --global user.name 'xyz'"
				sh "cd /data/terraform/devops && git config --global user.email 'xyz@xyz.com'"
				sh "cd /data/terraform/devops && git stash -a"
				sh "cd /data/terraform/devops && git pull origin master"
			}
		}
		
		stage('Init') {
			steps {				
					withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-SK', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "cd /path/of/tf/files/ && terraform init -backend-config='s3.tfvars'"
                }
			}
		}
		
		stage('Plan') {
		  steps {			
					withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-SK', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "cd /path/of/tf/files/ && terraform plan -var-file config.tfvars -lock=false"
                }
		  }
		}
		
		stage('Apply') {
		  steps {			
					withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-SK', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "cd /path/of/tf/files/ & && terraform apply -var-file config.tfvars -lock=false --auto-approve"
                }
		  }
		}		
	}
}
		

